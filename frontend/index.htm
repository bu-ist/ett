<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="ETT Home Page" content="">
    <meta name="author" content="Don Yurt, Warren Hennemuth">
    <title>ETT Home Page</title>

    <!-- download bootstrap -->
    <link rel="canonical" href="https://getbootstrap.com/docs/5.3.2/examples/jumbotron/">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

    <!-- Favicons -->
    <meta name="theme-color" content="#712cf9">

    <style>
      .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
      }

      @media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }

      .b-example-divider {
        height: 3rem;
        background-color: rgba(0, 0, 0, .1);
        border: solid rgba(0, 0, 0, .15);
        border-width: 1px 0;
        box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
      }

      .b-example-vr {
        flex-shrink: 0;
        width: 1.5rem;
        height: 100vh;
      }

      .bi {
        vertical-align: -.125em;
        fill: currentColor;
      }

      .nav-scroller {
        position: relative;
        z-index: 2;
        height: 2.75rem;
        overflow-y: hidden;
      }

      .nav-scroller .nav {
        display: flex;
        flex-wrap: nowrap;
        padding-bottom: 1rem;
        margin-top: -1px;
        overflow-x: auto;
        text-align: center;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
      }

      .containerRDO {
        display: block;
        position: relative;
        padding-left: 35px;
        margin-bottom: 12px;
        cursor: pointer;
        font-size: 22px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }

      /* Hide the browser's default radio button */
      .containerRDO input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
      }

      /* Create a custom radio button */
      .checkmark {
        position: absolute;
        top: 0;
        left: 0;
        height: 25px;
        width: 25px;
        background-color: #eee;
        border-radius: 50%;
      }

      /* On mouse-over, add a grey background color */
      .containerRDO:hover input ~ .checkmark {
        background-color: #ccc;
      }

      /* When the radio button is checked, add a blue background */
      .containerRDO input:checked ~ .checkmark {
        background-color: #2196F3;
      }

      /* Create the indicator (the dot/circle - hidden when not checked) */
      .checkmark:after {
        content: "";
        position: absolute;
        display: none;
      }

      /* Show the indicator (dot/circle) when checked */
      .containerRDO input:checked ~ .checkmark:after {
        display: block;
      }

      /* Style the indicator (dot/circle) */
      .containerRDO .checkmark:after {
        top: 9px;
        left: 9px;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: white;
      }

      .outerButtonContainer {
        border:#ccc 1px solid; 
        border-radius:15px; 
        padding:15px; 
        margin-top:30px; 
        width:90%;
        display:flex; 
        justify-content: center;
      }

      table {
        width: 100%;
      }

      th, td {
        border: 1px solid black
      }

      td {
        padding: 5px;
      }

      .trHeading {
        font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
        font-weight: bold;
      }

      .tdHeading {
        background-color: rgb(84, 123, 196);
        font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
        font-weight: bold;
        color:white;
        padding-left: 10px;
        padding-right: 20px;
        text-wrap: nowrap;
      }

      .tdEntry {
        width: 50%;
      }

      .tdSpacing {
        border: 0px solid black;
      }

      .ackSubmit {
        float: left;
      }

      hr {
        width: 80%;
        height: 1px;
        border: none;
        margin: 0 auto; 
        background-color: black;
      }
    </style>

  </head>
  <body>
    <main>

     <div class="container py-4">
        <header class="pb-3 mb-4 border-bottom">
          <a href="/" class="d-flex align-items-center text-dark text-decoration-none">
            <img src="https://societiesconsortium.com/wp-content/uploads/2019/05/SocietiesConsortium_on_SexualHarassmentin.svg" height="20%" width="20%" />            
            <span class="fs-4 ps-4"><img src="./title1.png" /></span>
          </a>
        </header>

        <div class="p-5 mb-4 bg-light rounded-3">

          <div id="acknowledge-section" class="container-fluid py-5" style="display: none">
            <h3 class="display-7 fw-bold" style="text-align:center">Privacy Policy Acknowledgement</h3>
            <p class="text-justify fs-4" style="text-align:justify;">
              <p>
                The Ethical Transparency Tool (ETT) Database, where you complete an entity’s ETT Registration Form or an Individual’s Registration Form, 
                Consent Form, and Exhibit Forms, is hosted on a server and kept on computers in the United States, governed by United States law.  
                So, you are transferring the personally identifiable data requested of you to a server or computers in the U.S.  
                By doing so, you are consenting to that transfer and to your data being further transferred in or outside the U.S. within the ETT design.  
                (ETT’s design is summarized in links from the Consent Form, Exhibit Forms, and Disclosure Form.)                
              </p>
              <p>
                If you are a citizen of or reside in another country, the privacy laws of that home country (or its states, provinces, or other divisions) 
                may be more protective than U.S. laws.  Subject to applicable U.S. laws, the ETT Database has been reasonably designed to protect against 
                the ETT Database itself transferring your personal data to anyone other than those meant to receive it within the ETT design. 
                However, your data on servers and computers in the U.S. may be subject to access by governments, courts, law enforcement officials and 
                national security authorities in the U.S. under U.S. or state/local laws.  Also, ETT specifies limits on use of your data by those who 
                receive it within the ETT design, but ETT does not oversee or control the recipients.  (The Consent Form and Disclosure Form describe the 
                recipients and use limits.)                
              </p>
              <p>
                By submitting your Entity’s Registration Form or your Individual Registration Form, Consent Form, or Affiliate Exhibit Forms on ETT, you 
                are acknowledging having reviewed and are agreeing to be bound to terms of the ETT Privacy Notices and ETT Privacy Policy.”                
              </p>

              <!-- Button trigger modal -->
              <div style="display:flex; justify-content: center; padding-top: 15px; padding-bottom: 35px;">
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                  View privacy policy
                </button>
              </div>

              <!-- Modal -->
              <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog  modal-dialog-scrollable">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="staticBackdropLabel">ETT privacy policy</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Porta non pulvinar neque laoreet suspendisse interdum consectetur libero. Vivamus at augue eget arcu. Ut pharetra sit amet aliquam id diam maecenas ultricies mi. Gravida in fermentum et sollicitudin ac orci. Risus nec feugiat in fermentum posuere. Leo duis ut diam quam nulla porttitor massa id neque. Adipiscing elit pellentesque habitant morbi tristique. Ullamcorper a lacus vestibulum sed arcu. Tempor nec feugiat nisl pretium fusce id velit. Et pharetra pharetra massa massa ultricies mi quis hendrerit dolor. Quisque id diam vel quam. Ac tortor vitae purus faucibus ornare suspendisse. Ornare arcu dui vivamus arcu. Sit amet commodo nulla facilisi. Sed id semper risus in hendrerit gravida rutrum. Faucibus pulvinar elementum integer enim neque volutpat ac tincidunt vitae. Tincidunt tortor aliquam nulla facilisi cras fermentum odio eu feugiat.
                      Pellentesque massa placerat duis ultricies. Est lorem ipsum dolor sit amet consectetur adipiscing. Ipsum dolor sit amet consectetur adipiscing elit duis. Est ultricies integer quis auctor elit sed vulputate. Vel pretium lectus quam id. Morbi tincidunt ornare massa eget egestas purus viverra. Bibendum est ultricies integer quis auctor. Vitae auctor eu augue ut. Cum sociis natoque penatibus et. Sed vulputate odio ut enim blandit volutpat maecenas volutpat.
                      Urna porttitor rhoncus dolor purus non enim. Lectus sit amet est placerat. Sit amet volutpat consequat mauris nunc congue nisi. Ac placerat vestibulum lectus mauris ultrices eros. Sed id semper risus in hendrerit gravida rutrum quisque non. Morbi quis commodo odio aenean sed adipiscing diam. Magna etiam tempor orci eu. Amet volutpat consequat mauris nunc congue nisi vitae suscipit tellus. Turpis egestas maecenas pharetra convallis. Morbi tristique senectus et netus. Suspendisse interdum consectetur libero id faucibus nisl tincidunt eget. In fermentum posuere urna nec tincidunt praesent semper feugiat. Sit amet volutpat consequat mauris nunc congue nisi vitae suscipit.
                      Morbi quis commodo odio aenean sed adipiscing diam donec. Fames ac turpis egestas integer eget aliquet nibh. Aenean euismod elementum nisi quis eleifend. Velit euismod in pellentesque massa placerat duis. Consectetur adipiscing elit pellentesque habitant morbi tristique. Eget dolor morbi non arcu risus quis. Ultrices vitae auctor eu augue ut lectus. Massa sed elementum tempus egestas sed sed risus pretium quam. Arcu cursus euismod quis viverra nibh cras pulvinar mattis. Et malesuada fames ac turpis egestas maecenas pharetra. Nunc sed velit dignissim sodales ut eu sem. Arcu felis bibendum ut tristique et. Egestas dui id ornare arcu odio ut sem. Phasellus faucibus scelerisque eleifend donec pretium vulputate sapien nec sagittis. Sit amet mauris commodo quis. Habitasse platea dictumst vestibulum rhoncus est pellentesque.
                      Eleifend donec pretium vulputate sapien nec sagittis aliquam. Ipsum dolor sit amet consectetur adipiscing elit. Id consectetur purus ut faucibus pulvinar elementum integer enim. Ipsum consequat nisl vel pretium lectus quam id leo. Fringilla phasellus faucibus scelerisque eleifend. Sed risus ultricies tristique nulla aliquet enim tortor at. Mauris in aliquam sem fringilla ut morbi tincidunt. Ut tristique et egestas quis ipsum. Praesent elementum facilisis leo vel fringilla est ullamcorper eget nulla. Egestas quis ipsum suspendisse ultrices gravida dictum fusce.
                      Aliquam ut porttitor leo a diam sollicitudin. Parturient montes nascetur ridiculus mus mauris vitae ultricies leo integer. Et ligula ullamcorper malesuada proin libero. Enim tortor at auctor urna nunc. Vel orci porta non pulvinar neque. Neque viverra justo nec ultrices dui sapien eget. Mi bibendum neque egestas congue quisque egestas diam in. Eu augue ut lectus arcu bibendum at varius. Est ultricies integer quis auctor. Turpis tincidunt id aliquet risus feugiat in ante metus dictum. Nulla pharetra diam sit amet nisl suscipit.
                      Imperdiet nulla malesuada pellentesque elit eget gravida cum sociis natoque. Ridiculus mus mauris vitae ultricies. Placerat orci nulla pellentesque dignissim enim sit amet venenatis. Dui sapien eget mi proin sed. Nunc eget lorem dolor sed viverra ipsum nunc aliquet. Nulla porttitor massa id neque aliquam vestibulum. Faucibus purus in massa tempor nec feugiat nisl. Neque laoreet suspendisse interdum consectetur libero id faucibus nisl tincidunt. Placerat orci nulla pellentesque dignissim. Tempus egestas sed sed risus pretium quam vulputate dignissim. Vitae tempus quam pellentesque nec. Semper viverra nam libero justo laoreet sit amet. Lobortis elementum nibh tellus molestie nunc non blandit massa enim. Nulla facilisi etiam dignissim diam quis enim lobortis scelerisque.
                      In cursus turpis massa tincidunt dui ut ornare lectus sit. Vivamus arcu felis bibendum ut tristique et. Urna porttitor rhoncus dolor purus non enim praesent elementum facilisis. Nulla pharetra diam sit amet nisl suscipit adipiscing bibendum. Tellus rutrum tellus pellentesque eu tincidunt tortor aliquam nulla facilisi. Sit amet nisl suscipit adipiscing bibendum est ultricies integer. Semper quis lectus nulla at volutpat diam ut venenatis tellus. Pulvinar etiam non quam lacus suspendisse faucibus interdum. Commodo elit at imperdiet dui accumsan sit amet nulla. Et sollicitudin ac orci phasellus egestas tellus rutrum tellus. At consectetur lorem donec massa sapien faucibus et molestie ac. Enim tortor at auctor urna nunc. Pretium aenean pharetra magna ac placerat vestibulum. Augue eget arcu dictum varius duis at consectetur lorem donec. Nulla facilisi morbi tempus iaculis urna id volutpat lacus laoreet. Sem viverra aliquet eget sit amet tellus cras adipiscing. Tristique nulla aliquet enim tortor at auctor. Lacus laoreet non curabitur gravida arcu. Adipiscing tristique risus nec feugiat in fermentum posuere urna. Arcu bibendum at varius vel pharetra vel turpis.
                      Nunc non blandit massa enim nec dui nunc mattis. Pellentesque nec nam aliquam sem et tortor consequat id porta. Tempor nec feugiat nisl pretium. Cursus sit amet dictum sit amet justo. Fermentum posuere urna nec tincidunt. Id diam maecenas ultricies mi eget. Dolor sit amet consectetur adipiscing elit. Fermentum odio eu feugiat pretium nibh ipsum consequat. Lacus suspendisse faucibus interdum posuere lorem. Lobortis scelerisque fermentum dui faucibus in.
                      Tellus pellentesque eu tincidunt tortor aliquam nulla facilisi cras fermentum. Non tellus orci ac auctor augue mauris augue neque. Etiam erat velit scelerisque in dictum non consectetur a. Adipiscing elit pellentesque habitant morbi tristique. Facilisis sed odio morbi quis commodo odio aenean sed adipiscing. Lectus quam id leo in vitae turpis massa sed elementum. Massa ultricies mi quis hendrerit dolor magna eget. Diam vulputate ut pharetra sit amet aliquam. Metus dictum at tempor commodo ullamcorper a lacus. Netus et malesuada fames ac turpis. Leo a diam sollicitudin tempor id eu nisl. A scelerisque purus semper eget duis at. Odio pellentesque diam volutpat commodo sed egestas egestas fringilla phasellus. Eget felis eget nunc lobortis mattis aliquam. Vulputate eu scelerisque felis imperdiet proin.
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                    </div>
                  </div>
                </div>
              </div>

              <hr>
              <table style="border-style:none; width:80%;">
                <tr>
                  <td style="text-align:right; border-style:none; font-size:20px;">
                    "By registering to use the ETT in my capacity as an Authorized Individual
                    <br>
                    or Administrative Support Professional of an ETT Registered Entity,
                    <br>
                    I have read, accept and agree to all terms of the ETT privacy policy"                 
                    &nbsp;<input id="chkAcknowledge" type="checkbox" class="form-check-input" onclick="document.getElementById('btnAcknowledgeSubmit').disabled = !this.checked;"/> 
                  </td>
                  <td style="padding-left:10px; border-style:none; vertical-align: bottom;">
                    <button id="btnAcknowledgeSubmit" class="btn btn-primary btn-lg" type="button" disabled>Submit</button>&nbsp;
                    <button id="btnGotoConsent" class="btn btn-primary btn-lg" type="button" style="display:none;">Go to Consent</button>                                      
                  </td>
                </tr>
              </table>

              <div id="acknowledgeResponse" style="display:flex; justify-content: center; padding-top: 15px;">
              </div>
            </p>
          </div>

          <div id="consent-section" class="container-fluid py-5" style="display: none">
           <h3 class="display-7 fw-bold" style="text-align:center">Entity Registration Form</h3>
            <p class="text-justify fs-4" style="text-align:justify;">
              <table>
                <tr><td class='tdHeading' colspan=1 style="padding-right:50px;">Name of organization</td><td colspan=3 style="width:100%"></td></tr>
                <tr><td class='tdSpacing' colspan=4>&nbsp;</td></tr>
              </table>
              <table>
                <tr><td class='trHeading' colspan=4>Administrative support professional<sup>1</sup></td></tr>
                <tr><td class='tdHeading'>Name</td><td class='tdEntry'></td><td class='tdHeading'>Title</td><td class='tdEntry'></td></tr>
                <tr><td class='tdHeading'>Phone</td><td class='tdEntry'></td><td class='tdHeading'>Email</td><td class='tdEntry'></td></tr>
                <tr><td class='tdSpacing' colspan=4>&nbsp;</td></tr>
                <tr><td class='trHeading' colspan=4>Authorized Individual 1<sup>2</sup></td></tr>
                <tr><td class='tdHeading'>Name</td><td class='tdEntry'></td><td class='tdHeading'>Title</td><td class='tdEntry'></td></tr>
                <tr><td class='tdHeading'>Phone</td><td class='tdEntry'></td><td class='tdHeading'>Email</td><td class='tdEntry'></td></tr>
                <tr><td class='tdSpacing' colspan=4>&nbsp;</td></tr>
                <tr><td class='trHeading'colspan=4 class='tdHeading'>Authorized Individual 2<sup>3</sup></td></tr>
                <tr><td class='tdHeading'>Name</td><td class='tdEntry'></td><td class='tdHeading'>Title</td><td class='tdEntry'></td></tr>
                <tr><td class='tdHeading'>Phone</td><td class='tdEntry'></td><td class='tdHeading'>Email</td><td class='tdEntry'></td></tr>
                <tr><td class='tdSpacing' colspan=4>&nbsp;</td></tr>
              </table>
            </p>
            <div style="padding-left:20px; display:flex; justify-content: center; text-align:justify; font-style: italic;">
              Registering to use ETT also means that in your official and personal capacities you have read and agree to the ETT Privacy Policy 
              [link] and consent to inclusion of your organization’s name, with or without its Authorized Individuals’ names and contact information 
              (as you reflect them above) on the ETT database and in ETT-related communications, factually stating that your organization is or was 
              registered to use ETT or is or was an ETT-registered entity (including but not limited to putting your organization’s name, with or without 
              its Authorized Individuals’ names and contact information, on a list of ETT-registered entities). Your organization’s name and Authorized 
              Individuals’ names will be removed from lists of then-current ETT-registered entities upon termination of your registration. 
              (ETT may be abbreviated or spelled out as Ethical Transparency Tool.)  Lists of ETT-registered entities (with or without their Authorized 
              Individuals names and contact information) may be used in recruiting additional entities to use ETT.  Any such reference will not include 
              an endorsement of ETT or state the specific way (within all the permitted ways) in which your organization is or was using ETT, without 
              your additional written consent.  Mere listing of your organization as an ETT-registered entity is not deemed an endorsement. 
              ETT may communicate aggregated data on the way Registered Entities use ETT.
            </div>
            <br>
            <hr style="margin-bottom: 30px;">
            <div style="font-style: italic;">
              <p>
                <sup>1</sup>Administrative Support Professional who assists and directly works with one or both of the Authorized Individuals, 
                is accustomed to maintaining confidential and sensitive information, and can administratively support the Registered Entity’s 
                use of ETT, including submitting requests for disclosures when directed by an Authorized Individual.                
              </p>                
              <p>
                <sup>2</sup>Person in a senior role that is accustomed to managing confidential and sensitive information, who will directly receive the 
                completed Disclosure Form information on behalf of the Requesting Registered Entity and will decide who at the Registered 
                Entity needs the information.                
              </p>                
              <p>
                <sup>3</sup>Ibid.                
              </p>                
            </div>
            <div style="justify-content: center; border-style:solid; padding:10px; padding-right:25px;">
              <div style="text-align: center; text-decoration: underline; font-weight: bold; padding-bottom: 10px;">
                IMPORTANT TERMS OF USE FOR ENTITIES REGISTERING TO USE ETT—Also at www.INSERT
              </div>
              <ol style="text-align: justify;">
                <li>
                  EACH REGISTERED ENTITY ACKNOWLEDGES THAT IT MUST MAKE INDEPENDENT DECISIONS AND POLICIES.  
                  ETT is just an automation tool that an ETT-Registered Entity can use, in its discretion, to get consents to disclosures of 
                  findings of misconduct about an individual and to make requests for disclosures to the entities that made or adopted findings.  
                  ETT does not receive any disclosures and does not dictate or guide decisions or policies, including, e.g., when to use ETT or 
                  who is qualified or should be selected for any honor, privilege, employment, or role.
                </li>
                <li>
                  Authorized Individuals should be in senior institutional roles, accustomed to managing sensitive and confidential information, 
                  and knowledgeable about the Registered Entity.  Administrative Support Professionals should also be accustomed to managing 
                  sensitive and confidential information.  A Registered Entity determines the individuals.
                </li>
                <li>
                  The Registered Entity’s Administrative Support Professional will be responsible for updating changes in who is an Authorized 
                  Individual or Administrative Support Professional.  However, to make a change effective, one of the two Authorized Individuals 
                  will need to confirm the change. 
                </li>
                <li>
                  The Administrative Support Professional may initiate Disclosure Requests in ETT only when directed by an Authorized Individual.  
                  Only Authorized Individuals should be the direct recipients of completed Disclosure Forms from other entities.  
                  Authorized Individuals will decide who within the Registered Entity needs the disclosed information (or will confer with the person who has that authority).  
                  Registered Entities create internal processes to satisfy all terms of use.
                </li>
                <li>
                  Completed Consent Forms, Affiliate Exhibit Forms, and Disclosure Forms must be used by a Registered Entity only in connection 
                  with Privilege(s) or Honor(s), Employment or Role(s)<sup>4</sup>.   
                </li>
                <li>
                  Registered Entities must not share completed Consent Forms, Affiliate Exhibit Forms, or Disclosure Forms that they receive with 
                  other entities (third parties). Registered Entities may access Consent Forms on ETT, while a Consent is in effect.
                </li>
                <li>
                  No warranties of any kind are made concerning ETT.  Each Registered Entity determines the uses of ETT that are operationally 
                  and legally appropriate for it and waives and releases all claims and liabilities of every kind (except intentional harm) that 
                  are associated with ETT, against the Societies Consortium on Sexual Harassment in STEMM, EducationCounsel LLC, the American 
                  Association for the Advancement of Science, and each designer, developer, host, sponsor, agent, contractor, administrator and/or 
                  operator of ETT (and their respective directors/trustees/managers/partners, members/stockholders, personnel, agents, contractors, 
                  and representatives).
                </li>
              </ol>
              <div style="text-align: center; border-style:solid; padding:10px; ">
                Check here
                <input id="chkConsent" type="checkbox" class="form-check-input" onclick="document.getElementById('btnConsentSubmit').disabled = !this.checked;"/>
                , type your name below, and submit, to digitally sign this Registration Form on behalf of the Registered Entity 
                and to agree to these terms, register, and confirm your authority to do so.
                <br>
                Sign, date, and click on SUBMIT:____________________&nbsp;
                <button id="btnConsentSubmit" class="btn btn-primary btn-lg" type="button" disabled>SUBMIT</button>
                <br>
                You may terminate your registration at any time <a href="#" onclick="alert('Not implemented')">here</a>.                
              </div>
            </div>
            <div id="consentResponse" style="display:flex; justify-content: center; padding-top: 40px;"></div>
          </div>

          <div id="auth-section" class="container-fluid py-5">
            <h1 class="display-5 fw-bold" style="text-align:center">Welcome!</h1>
            <h1 class="display-8 fw-bold" style="text-align:center">Please log in:</h1>
            <p class="text-justify fs-4" style="text-align:justify;">ETT is designed to support AAU’s harassment prevention principles and the recommendations of NASEM’s June 2018 report on sexual harassment of women in academic science, engineering, and medicine by helping to create a norm of transparency about findings of misconduct against a person, across the higher-education and research ecosystem of societies, institutions of higher education, and other research organizations. This tool covers sexual, gender, and racial misconduct — as well as professional licensure, financial, and research misconduct to maximize its utility.</p>
            <div style="display:flex; justify-content: center;">
              <div class="outerButtonContainer">
                <div style="width:342px;">
                  <form id="formRole">
                    <label class="containerRDO">Hello World
                      <input type="radio" name="rdoRole" value="HELLO_WORLD" checked="checked">
                      <span class="checkmark"></span>
                    </label>
                    <label class="containerRDO">System Administrator
                      <input type="radio" name="rdoRole" value="SYS_ADMIN">
                      <span class="checkmark"></span>
                    </label>
                    <label class="containerRDO">Registered Entity Administrator
                      <input type="radio" name="rdoRole" value="RE_ADMIN">
                      <span class="checkmark"></span>
                    </label>
                    <label class="containerRDO">Authorized Individual
                      <input type="radio" name="rdoRole" value="RE_AUTH_IND">
                      <span class="checkmark"></span>
                    </label>
                    <label class="containerRDO">Consenting Person
                      <input type="radio" name="rdoRole" value="CONSENTING_PERSON">
                      <span class="checkmark"></span>
                    </label>
                    <button id="btnSignin" class="btn btn-primary btn-lg" type="button">Login</button>
                    &nbsp;
                    <button id="btnSignup" class="btn btn-primary btn-lg" type="button">Signup</button>
                  </form>
                </div>
              </div>
            </div>
          </div>

          <div id="app-section" class="container-fluid py-5" style="display: none">
            <center>
              <p class="fs-4">Welcome, <span id="username"></span>!</p>
              <p class="fs-4" id="apiDescription"></p>
              <p><button id="btnPingApi" class="btn btn-primary btn-lg" type="button"">Ping the API</button></p>
              <p><span id="apiResponse"></span></p>
            </center>            
            <button id="btnSignout" type="button" class="btn btn-danger"">Sign out</button>
          </div>

        </div>

        <footer class="pt-3 mt-4 text-muted border-top">
          &copy; 2023
        </footer>
      </div>
    </main>

  <script>

    const STATIC_PARAMETERS = 'STATIC_PARAMETERS_PLACEHOLDER';
    const roleChange = () => {
      selected_role = document.forms['formRole']['rdoRole'].value;
      var desc = document.getElementById('apiDescription');
      switch(selected_role) {
        case 'HELLO_WORLD':
          desc.innerHTML = 'Simple API to get a hello message'; break;
        case 'SYS_ADMIN':
          desc.innerHTML = 'API to get a list of registered entities'; break;
        case 'RE_ADMIN':
          desc.innerHTML = 'API to the names of all registered entity staff'; break;
        case 'RE_AUTH_IND':
          desc.innerHTML = 'API to view any consenting persons who signed up with the registered entity'; break;
        case 'CONSENTING_PERSON':
          desc.innerHTML = 'API to fill out a consent form'; break;
      }
    }
    const qsrole = new URL(document.location.href).searchParams.get('selected_role');
    if(qsrole) {
      document.forms['formRole']['rdoRole'].value = qsrole;
    }
    roleChange();

    const rdoRoles = document.getElementsByName('rdoRole');
    rdoRoles.forEach(rdoRole => {
      rdoRole.addEventListener('change', roleChange);
    });

    const clientId = () => { return STATIC_PARAMETERS.ROLES[selected_role].CLIENT_ID; }
    const redirectUri = () => { return STATIC_PARAMETERS.ROLES[selected_role].REDIRECT_URI; }
    const apiUri = () => { return STATIC_PARAMETERS.ROLES[selected_role].API_URI; }

    /**
     * Generate a code verifier
     */
    function generateCodeVerifier() {
      const codeVerifierLength = 64;
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
      let codeVerifier = '';

      for (let i = 0; i < codeVerifierLength; i++) {
        const randomIndex = Math.floor(Math.random() * chars.length);
        codeVerifier += chars.charAt(randomIndex);
      }

      return codeVerifier;
    }

    /**
     * Generate a base64 encoded string from input and return the url safe result.
     * NOTE: The base64 value is NOT url encoded, but any non-url compliant characters are stripped out.
     * Any platform implementing the oauth PKCE standard will account for this when processing the code challenge.
     */
    async function base64UrlEncode(sha256HashBuffer) {
      // Convert the SHA-256 hash to a base64 URL encoded string
      const sha256HashArray = Array.from(new Uint8Array(sha256HashBuffer));
      const base64UrlEncoded = btoa(String.fromCharCode(...sha256HashArray))
        .replace(/=/g, '')
        .replace(/\+/g, '-')
        .replace(/\//g, '_');

      return base64UrlEncoded;
    }

    function getRandomString(length) {
      const s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
      return Array(length).join().split(',').map(
        function() { 
          return s.charAt(Math.floor(Math.random() * s.length)); 
        }
      ).join('');
    }

    /**
     * Generate a code challenge from the verifier
     */
    async function generateCodeChallenge(codeVerifier) {
      const encoder = new TextEncoder();
      const encodedVerifier = encoder.encode(codeVerifier);
      const codeChallenge = base64UrlEncode(await crypto.subtle.digest('SHA-256', encodedVerifier));
      return codeChallenge;
    }

    /**
     * Issue a code challenge to the cognito authorization endpoint as the first step in 
     * acquiring an authorization code to exchange for a JWT.
     */
    function initiateAuthorizationRequest(codeChallenge, state) {
      const params = {
        response_type: 'code',
        client_id: clientId(),
        redirect_uri: `https://${redirectUri()}?action=login&selected_role=${selected_role}`,
        state: state,
        code_challenge: codeChallenge,
        code_challenge_method: 'S256'
      };
      
      const queryString = Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');
      const authorizationUrl = `${STATIC_PARAMETERS.COGNITO_DOMAIN}/oauth2/authorize?${queryString}`;
      
      window.location.href = authorizationUrl;
    }

    /**
     * Request an authorization code from the cognito authorization endpoint, with the original code verifier 
     * included as the second (and final) step in acquiring an authorization code to exchange for a JWT.
     * SEE: https://docs.aws.amazon.com/cognito/latest/developerguide/token-endpoint.html
     *      https://www.rfc-editor.org/rfc/rfc6749#section-3.2
     */
    function exchangeAuthorizationCode(callback) {
      const queryParams = new URLSearchParams(window.location.search);
      const authorizationCode = queryParams.get('code');
      const returnedState = queryParams.get('state')
      const savedState = window.sessionStorage.getItem("state");

      if(savedState !== returnedState) {
        throw Error("Probable session hijacking attack!");
      }

      if( ! authorizationCode) {
        throw Error('Authorization code not found in the URL.');
      }

      const codeVerifier = window.sessionStorage.getItem("code_verifier");
      const params = {
        grant_type: 'authorization_code',
        client_id: clientId(),
        redirect_uri: `https://${redirectUri()}?action=login&selected_role=${selected_role}`,
        state: savedState,
        code: authorizationCode,
        code_verifier: codeVerifier
      };

      const formData = Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');

      fetch(`${STATIC_PARAMETERS.COGNITO_DOMAIN}/oauth2/token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        AccessJwtCookie.setJwt(data.access_token);
        IDJwtCookie.setJwt(data.id_token);
        // RefreshJwtCookie.setJwt(data.refresh_token);
        callback();       
      })
      .catch(error => {
        console.error(`Authorization error: ${error}`);
      });
    }

    /**
     * Submit acknowledgement of the privacy policy and if successful, navigate to the consent screen
     */
    function acknowledge(invitationCode) {
      const msg = document.getElementById('acknowledgeResponse');
      const uri = `${STATIC_PARAMETERS.ACKNOWLEDGE_API_URI}/register/${invitationCode}`;
      fetch(uri, {
        method: 'GET',
        credentials: 'omit',
        mode: 'cors',
      })
      .then(response => response.json())
      .then((json) => {
        const { message, payload } = json;
        if(message == 'Ok') {
          document.location.href = `./?action=consent&code=${invitationCode}`;
        }
        else {
          msg.innerHTML = message;
        }
      })
      .catch((e) => {
        msg.innerHTML = `<pre>${JSON.stringify(e, null, 2)}</pre>`;
      }); 
    }

    /**
     * Submit consent and if successful, navigate to the cognito hosted UI.
     */
    function consent() {
      const msg = document.getElementById('consentResponse');
      const uri = `${STATIC_PARAMETERS.CONSENT_API_URI}/register/${invitationCode}`;
      fetch(uri, {
        method: 'GET',
        credentials: 'omit',
        mode: 'cors',
      })
      .then(response => response.json())
      .then((json) => {
        const { message, payload } = json;
        if(message == 'Ok') {
          // RESUME NEXT: Put fields into the consent table and have the email field value passed as a parameter to signup()
          signUp();
        }
        else {
          msg.innerHTML = message;
        }
      })
      .catch((e) => {
        msg.innerHTML = `<pre>${JSON.stringify(e, null, 2)}</pre>`;
      }); 
    }

    function lookupRegistrationState(step, invitationCode, callback) {
      switch(step) {
        case 'acknowledge':
          var uri = `${STATIC_PARAMETERS.ACKNOWLEDGE_API_URI}/lookup-invitation/${invitationCode}`;
          break;
        case 'consent':
          var uri = `${STATIC_PARAMETERS.CONSENT_API_URI}/lookup-invitation/${invitationCode}`;
          break;
      }
      fetch(uri, {
        method: 'GET',
        credentials: 'omit',
        mode: 'cors',
      })
      .then(response => response.json())
      .then((json) => {
        const { message, payload } = json;
        if(message == 'Ok') {
          callback(payload);
        }
        else {
          msg.innerHTML = message;
        }
      })
      .catch((e) => {
        msg.innerHTML = `<pre>${JSON.stringify(e, Object.getOwnPropertyNames(e), 2)}</pre>`;
      }); 
    }

    /**
     * This function is triggered as a callback from lookupRegistrationState with the returned invitation.
     * If the invitation shows an acknowledgement timestamp, then enable buttons to goto the consent screen.
     */
    function applyAcknowledgementData(invitation) {
      const { acknowledged_timestamp } = invitation;
      const chk = document.getElementById('chkAcknowledge');
      const msg = document.getElementById('acknowledgeResponse');
      const btnConsent = document.getElementById('btnGotoConsent');
      const btnSubmit = document.getElementById('btnAcknowledgeSubmit');
      if(acknowledged_timestamp) {
        msg.innerHTML = `You acknowledged the privacy policy at ${acknowledged_timestamp}`;
        chk.checked = true;
        btnSubmit.disabled = true;
        btnConsent.style.display = 'inline';
      }
      else {
        msg.innerHTML = message;
        chk.checked = false;
        btnSubmit.disabled = true;
        btnConsent.style.display = 'none';
      }
    }

    /**
     * This function is triggered as a callback from lookupRegistrationState with the returned invitation.
     * If the invitation shows a consent timestamp, then enable buttons to goto cognito login.
     */
    function applyConsentData(invitation) {
      const { consented_timestamp } = invitation;
      const chk = document.getElementById('chkConsent');
      const msg = document.getElementById('consentResponse');
      const btnSubmit = document.getElementById('btnConsentSubmit');
      if(consented_timestamp) {
        msg.innerHTML = `You acknowledged the privacy policy at ${consented_timestamp}`;
        chk.checked = true;
        btnSubmit.disabled = true;
      }
      else {
        msg.innerHTML = message;
        chk.checked = false;
        btnSubmit.disabled = true;
      }
    }

    /**
     * Signup for a cognito userpool account.
     */
    function signUp(email) {
      const params = {
        client_id: clientId(),
        response_type: 'code',
        scope: 'email+openid+phone',
        redirect_uri: encodeURIComponent(`https://${redirectUri()}?action=signedup`)
      };

      if(email) {
        params.username = email;
      }
      const queryString = Object.keys(params).map(key => `${key}=${params[key]}`).join('&');
      const signUpUrl = `${STATIC_PARAMETERS.COGNITO_DOMAIN}/signup?${queryString}`;
      window.location.href = signUpUrl;
    }

    /**
     * Authenticate with the cognito user pool in such a way as to reflect that it implements the
     * oauth PKCE standard. The final redirect should come with a JWT for all api access.
     */
    function signIn() {
      const codeVerifier = generateCodeVerifier();
      const state = getRandomString(12);

      // Save state and code_verifier in session storage
      const storage = window.sessionStorage;
      storage.clear();
      storage.setItem("state", state);
      storage.setItem("code_verifier", codeVerifier);

      generateCodeChallenge(codeVerifier).then(codeChallenge => {
        initiateAuthorizationRequest(codeChallenge, state);
      });
    }

    function signOut() {
      const params = {
        client_id: clientId(),
        logout_uri: encodeURIComponent(`https://${redirectUri()}?action=logout`)
      };
      const queryString = Object.keys(params).map(key => `${key}=${params[key]}`).join('&');
      const signOutUrl = `${STATIC_PARAMETERS.COGNITO_DOMAIN}/logout?${queryString}`;

      window.location.href = signOutUrl;
    }

    // https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-the-access-token.html
    // https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html
    function pingApi() {
      fetch(apiUri(), {
        method: 'GET',
        mode: "cors",
        credentials: 'include',
        headers: {
          'Authorization': `Bearer ${AccessJwtCookie.getJwt()}`,
          'Content-Type': 'application/json',
          [STATIC_PARAMETERS.PAYLOAD_HEADER]: '{ "task": "ping" }'
        }
      })
      .then((response) => {
        if (response.ok) {
          return response.text();
        } 
        else {
          document.getElementById('apiResponse').innerHTML = `Bad response: <br><textarea rows=5 cols=80>${JSON.stringify(response.body, null, 2)}</textarea>`;
        }
      })
      .then((text) => {
        document.getElementById('apiResponse').innerHTML = `API response: ${text}`;
      })
      .catch((error) => {
        document.getElementById('apiResponse').innerHTML = `API error: <br><textarea rows=5 cols=80>${JSON.stringify({msg: error.message, stack: error.stack}, null, 2)}</textarea>`;
      });
    }

    /**
     * This function serves as a utility object for processing JWTs received from cognito and the cookies they are stored in.
     */
    const JwtCookie = function(cookieName) {
      this.getCookie = function() {
        const cookies = document.cookie.split(';').map(cookie => cookie.trim());
        for (const cookie of cookies) {
          if (cookie.startsWith(cookieName + '=')) {
            return cookie;
          }
        }
        return null; // JWT cookie not found
      };
      this.getJwt = function() {
        const cookie = this.getCookie();
        if(cookie) {
          return decodeURIComponent(cookie.substring(cookieName.length + 1));
        }
        return null; // JWT cookie not found
      };
      this.setJwt = function(jwt) {
        const secureFlag = window.location.protocol === 'https:' ? '; Secure' : '';
        const decodedToken = this.getDecodedToken(jwt);
        const expirationDate = new Date();
        if(decodedToken.expires_in) {
          expirationDate.setTime(expirationDate.getTime() + decodedToken.expires_in * 1000); // Convert expires_in from seconds to milliseconds
        } 
        else if(decodedToken.exp) {
          expirationDate.setTime(decodedToken.exp * 1000); // Convert the 'exp' claim to milliseconds
        }
        else {
          console.error("Cookie not set. No expiration claims found in jwt");
          return;
        }
        const expires = `; expires=${expirationDate.toUTCString()}`;
        const cookieValue = encodeURIComponent(jwt) + expires + secureFlag + '; SameSite=Strict';
        document.cookie = `${cookieName}=${cookieValue}`;
        // Now that the cookie is set and we have the JWT, we don't need the state and code verfier values anymore.
        const storage = window.sessionStorage;
        storage.clear();
      };
      this.clearJwt = function() {
        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
      };
      this.getDecodedToken = function(jwt) {
        if(!jwt) jwt = this.getJwt();
        if(!jwt) return null;
        return JSON.parse(atob(jwt.split('.')[1])); // Decoding the token payload (middle part)
      };
      this.jwtExpired = function() {
        const decodedToken = this.getDecodedToken();
        const currentTime = new Date();
        if (decodedToken?.expires_in) {
          const expirationTime = new Date(decodedToken.iat * 1000 + decodedToken.expires_in * 1000);
          return currentTime >= expirationTime;              
        }
        else if(decodedToken?.exp) {
          const expirationTime = new Date(decodedToken.exp * 1000);
          return currentTime >= expirationTime;
        }
        return true;
      };
      /**
       * This function is an alternative to jwtExpired. The cookie expiration was set during its creation
       * based on the expiration of the jwt. Should be same result but more efficient to check expiration this way.
       */ 
      this.cookieExpired = function() {
        const cookie = this.getCookie();
        if(cookie) {
          const expirationTime = new Date(cookie.split(';').find(part => part.trim().startsWith('expires='))).getTime();
          const currentTime = new Date().getTime();
          return currentTime >= expirationTime;
        }
        console.log(`${cookieName} cookie is expired`);
        return true;
      };
      this.getUser = function() {
        const decodedToken = this.getDecodedToken();
        return {
          name: decodedToken.name
        };
      }
    };

    const IDJwtCookie= new JwtCookie('EttIdJwt')
    const AccessJwtCookie = new JwtCookie('EttAccessJwt');
    const RefreshJwtCookie = new JwtCookie('EttRefreshJwt');

    // Check the querystring for action=login on page load
    window.onload = () => {
      const queryParams = new URLSearchParams(window.location.search);

      // Define the different sections of the page and a function to switch between them
      const sections = [ 'auth', 'app', 'acknowledge', 'consent'];
      const showSection = (sectionToShow) => {
        sections.forEach(section => {
          document.getElementById(`${section}-section`).style.display = sectionToShow == section ? 'block' : 'none';
        })
      }

      // Function for checking the users login status.
      const checkAuth = () => {
        if(!AccessJwtCookie.jwtExpired()) {
          const user = IDJwtCookie.getUser();
          document.getElementById('username').innerHTML = user.name;
          showSection('app');
        }
        else if(!RefreshJwtCookie.jwtExpired()) {
          // TODO: Use the refresh token to restore access.
          console.log('Token refresh not implemented yet.');
        }
      }

      // Get querystring parameters
      const action = queryParams.get('action');
      const invitationCode = queryParams.get('code');

      // Assign events to buttons
      document.getElementById('btnSignin').addEventListener('click', () => {
        signin();
      });
      document.getElementById('btnSignup').addEventListener('click', () => {
        signUp();
      });
      document.getElementById('btnPingApi').addEventListener('click', () => {
        pingApi();
      });
      document.getElementById('btnSignout').addEventListener('click', () => {
        signOut();
      });
      document.getElementById('btnGotoConsent').addEventListener('click', () => {
        document.location.href = `./?action=consent&${invitationCode}`;
      });
      document.getElementById('btnAcknowledgeSubmit').addEventListener('click', () => {
        acknowledge(invitationCode);
      });

      /**
       * 1) Render the screen that corresponds to the task querystring parameter (no task defaults to the login screen)
       * 2) Perform any "onload" actions specific to the task.
       */
      switch(action) {

        case 'acknowledge':
          showSection('acknowledge');
          lookupRegistrationState('acknowledge', invitationCode, applyAcknowledgementData);
          break;

        case 'consent':
          showSection('consent');
          lookupRegistrationState('consent', invitationCode, applyConsentData);
          break;

        case 'login':
          exchangeAuthorizationCode(checkAuth);
          break;

        case 'signedup':
          document.getElementById('btnSignup').style.display = 'none';
          checkAuth();
          break;

        case 'logout':
          console.log('Sign out successful');
          // Remove JWT access and refresh tokens from cookies
          AccessJwtCookie.clearJwt();
          IDJwtCookie.clearJwt();
          RefreshJwtCookie.clearJwt();
          checkAuth();
          break;
      }
    };

  </script>
</script>   
</body>
</html>